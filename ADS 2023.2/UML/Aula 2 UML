é semântica quando temos uma agregação é uma lista independente(uma classe não depende da outra), já na Composição temos uma lista dependente(uma classe depende da outra). Ex: Um livro compõe uma publicação. Observe que uma empresa que tem uma biblioteca, poderíamos pensar que a biblioteca tem uma relação de dependência com a empresa, mas não tem, pois a biblioteca não é uma empresa e a empresa não é uma biblioteca. Quando uma classe tem outra é agregação, já quando uma classe é outra é composição.
Associação reflexiva ex: disciplina como pré-requisito para outra disciplina ou seja, no caso da classe curso pode ter múltiplos pré-requisitos e o pré-requisito de um curso pode ter muitos cursos. Ou seja, quando a própria classe se relaciona como ela mesma.
Tipos de relacionamentos: Associação, agregação e Composição.
agração é losango aberto, composição é um losango fechado e as duas tem relacionamentos(mas não é necessariamente uma associação(pois na associação não é necessariamente uma composição ou agregação e nem herança.))

Não existe uma modelagem certa ou errada, mas existe uma formas mais elegantess.. Se uma empresa só tem uma biblioteca, não precisariamos da entidade empresa.
Para fazer o modelo, primeiro temos que tirar os requisitos do texto: Primeiro, temos que identificar quem são as entidades(no modelo é algo que vai ser guardado é um model, uma entidade, em um dado momento vou precisar dessa informação... Geralmente, uma entidade é uma classe.)... E ver os tipos de relacionamentos que essas classes têm se é de dependencia ou independencia entre as classes... se é só associação, agregação ou composiçõa.

bizu: a herança é essência da classe.
Herança (ou Generalização) evita redundância de classes, de código e etc, reutilização de código, atomicidade. CUma herançã podemos eherdar atributos, métodos, assim a gente vai ter uma classe superior e uma subclasse, ou seja, uma classe e uma subclasse. Quando temos entidades e elementos que têm caracterí  . Assim, o atributo compartilhado nas duas classes a gente usa uma única vez. Uma classe também pode herdar de uma superclasse, assim como uma subclasse pode herdar de mais de uma classe, é o que chamamos de herança múltipla. A herança é sempre de uma subclasse para uma superclasse. Algumas linguagens limitam pra até níveis de herança por exemplo. Não temos cardinalidade em herança(questão de concurso) porque é a relação do todo para o todo. Observe que é a superclasse é um subconjunto da classe na agregação, pois todos os atributos da superclasse estará na classe, mas nem todos os atributos da classe serão vistos pela classe.
    Quado temos vários níveis de herança aumenta a complexidade, dessa forma para reverter isso, a gente a define uma tabela e define um único atributo que define cada uma das classes diferentes que eram subclasses. Por exemplo: PF e PJ herdam da classe Pessoa. Podemo criar uma única tabela que engloba tudo: pessoa, PF e PJ e definir um único atributo que 

Java, C# não impletamentam Herança múltipla para fazer isso, temos que usam interface, usando um implement, e nesses classes só implementamos as assinaturas do métodos e aqui vamos implementar, o que chamamos de sobrecarga do método(que é teríamos que codificar na classe, na mão, os implements) que tentar simular uma herança. Java diz que confunde pois não sabe de onde o atributo está herdando. C++ implementa herença.
    N ahenreação múltipla procurar por comentamento comum (perações e estado comum (atributos).
